version: '3.8'

services:
  # ---- Database Services ----
  postgres:
    image: postgres:15.4
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - trd-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -q -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  mongo:
    image: mongo:6.0.12
    env_file: .env
    volumes:
      - mongo_data:/data/db
      - ./db/mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - trd-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ---- Message Broker ----
  rabbitmq:
    image: rabbitmq:3.12.11-management
    env_file: .env
    ports:
      - "5672" # Internal port only
    networks:
      - trd-network
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      timeout: 10s
      retries: 3    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ---- Business Services ----
  authentication:
    container_name: authentication
    build: ./authentication
    env_file: .env
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - trd-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  pari:
    container_name: pari
    build: ./pari
    env_file: .env
    environment:
      - MONGODB_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
    networks:
      - trd-network
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  match:
    container_name: match
    build: ./match
    env_file: .env
    environment:
      - MONGODB_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017
    networks:
      - trd-network
    depends_on:
      - mongo
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  paiement:
    container_name: paiement
    build: ./paiement
    env_file: .env
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq
    networks:
      - trd-network
    depends_on:
      - postgres
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  notifications:
    build: ./notifications
    env_file: .env
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq
    networks:
      - trd-network
    depends_on:
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ---- Monitoring ----
  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - trd-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.0.3
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
      - GF_AUTH_BASIC_ENABLED=true
      - GF_AUTH_PROXY_ENABLED=false
      - GF_LOG_LEVEL=debug
    networks:
      - trd-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # ---- Gateway ----
  gateway:
    image: nginx:1.25.3-alpine
    ports:
      - "80:80"
      - "443:443" # Optional for TLS
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./gateway/certs:/etc/nginx/certs
    networks:
      - trd-network
    depends_on:
      - authentication
      - pari
      - paiement
      - prometheus
      - grafana
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ---- PostgreSQL backup ----
  backup-postgres:
    image: postgres:15.4
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    command: >
      bash -c 'sleep 20  # Attendre que PostgreSQL soit prÃªt
      pg_dump -h postgres -U $$POSTGRES_USER -d $$POSTGRES_DB -Fc -f /backups/$$(date +%Y-%m-%d).dump'
    depends_on:
      postgres:
        condition: service_healthy    
    env_file: .env
    networks:
      - trd-network

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  trd-network:
    driver: bridge