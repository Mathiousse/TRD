version: '3.8'

services:
  # ---- Database Services ----
  postgres:
    image: postgres:15.4
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - trd-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -q -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  mongo:
    image: mongo:6.0.12
    env_file: .env
    volumes:
      - mongo_data:/data/db
    networks:
      - trd-network
    healthcheck:
      test: ["CMD-SHELL", "mongo --eval 'db.runCommand(\"ping\").ok' | grep 1"]
      interval: 20s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ---- Message Broker ----
  rabbitmq:
    image: rabbitmq:3.12.11-management
    env_file: .env
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - trd-network
    healthcheck:
      test: ["CMD-SHELL", "curl --fail -u guest:guest http://localhost:15672/api/healthchecks/node || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ---- Business Services ----
  authentication:
    build: ./authentication
    env_file: .env
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "3001:3000"
    networks:
      - trd-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  pari:
    build: ./pari
    env_file: .env
    environment:
      - MONGODB_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq
    ports:
      - "3002:3000"
    networks:
      - trd-network
    depends_on:
      - mongo
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  paiement:
    build: ./paiement
    env_file: .env
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq
    ports:
      - "3003:3000"
    networks:
      - trd-network
    depends_on:
      - postgres
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  notifications:
    build: ./notifications
    env_file: .env
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq
    ports:
      - "3004:3000"
    networks:
      - trd-network
    depends_on:
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  match:
    build: ./match
    env_file: .env
    environment:
      - MONGODB_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017
    ports:
      - "3005:3000"
    networks:
      - trd-network
    depends_on:
      - mongo
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ---- Gateway ----
  gateway:
    image: nginx:1.25.3-alpine
    ports:
      - "80:80"
      - "443:443" # Optional for TLS
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./gateway/certs:/etc/nginx/certs # TLS certificates (if used)
    networks:
      - trd-network
    depends_on:
      - authentication
      - pari
      - paiement
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - trd-network

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - trd-network
  
  backup-postgres:
    image: postgres:15.4
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    command: >
      bash -c 'pg_dump -Fc -U $$POSTGRES_USER -d $$POSTGRES_DB -f /backups/$$(date +%Y-%m-%d).dump'
    env_file: .env
    networks:
      - trd-network
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local

networks:
  trd-network:
    driver: bridge